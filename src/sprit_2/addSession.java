/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sprit_2;
import forConnection.connect;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Sajee
 */
public class addSession extends javax.swing.JFrame {
    PreparedStatement pst;
    ResultSet rs;
    connect cObj = new connect(); //---create object to connect class---
    Connection conn;
  
    public addSession() {
        initComponents();
        getData();
        getData2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOfConsecutiveSessions = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtSerach = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cBoxDay = new javax.swing.JComboBox<>();
        cBoxTime = new javax.swing.JComboBox<>();
        cBoxDuration = new javax.swing.JComboBox<>();
        btnNonOverlap = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(126, 239, 239));

        tableOfConsecutiveSessions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturers", "Subject Code", "Subject Name", "Tag", "GroupId", "Room"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOfConsecutiveSessions.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableOfConsecutiveSessions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOfConsecutiveSessionsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableOfConsecutiveSessions);

        btnRemove.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(171, 14, 14));
        btnRemove.setText("DELETE SESSION");
        btnRemove.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(220, 20, 44), 3, true));
        btnRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(0, 0, 153));
        btnBack.setText("<<<  BACK");
        btnBack.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(87, 87, 236), 3, true));
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        txtSerach.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtSerach.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSerachKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(231, 95, 5));
        jLabel2.setText("search");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(6, 6, 182));
        jLabel1.setText("Consecutive Sessions");

        cBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---select day---" }));
        cBoxDay.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                cBoxDayInputMethodTextChanged(evt);
            }
        });

        cBoxTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---select time---" }));

        cBoxDuration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---select duration---" }));
        cBoxDuration.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                cBoxDurationInputMethodTextChanged(evt);
            }
        });

        btnNonOverlap.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnNonOverlap.setForeground(new java.awt.Color(23, 148, 23));
        btnNonOverlap.setText("Add Non-Overlapping");
        btnNonOverlap.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(21, 131, 20), 2, true));
        btnNonOverlap.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNonOverlap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNonOverlapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(392, 392, 392)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSerach, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1157, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cBoxDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(cBoxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(btnNonOverlap, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(49, 49, 49))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtSerach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel1))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cBoxTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNonOverlap, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cBoxDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        try {
                conn = cObj.getConnection(); //---get connection---
                DefaultTableModel table = (DefaultTableModel) tableOfConsecutiveSessions.getModel();
                int [] Index = tableOfConsecutiveSessions.getSelectedRows();
                Object [] column = new Object[8];
                
                if(tableOfConsecutiveSessions.getRowCount() == 0)//---If Table is empty---
                {
                    JOptionPane.showMessageDialog(this, "Now, Table is Empty.");
                }
                else if(tableOfConsecutiveSessions.getSelectedRowCount() > 0)
                {
                    int response = JOptionPane.showConfirmDialog(null, "Are you sure to delete?", "Delete", JOptionPane.YES_NO_OPTION);
                        if(response == JOptionPane.YES_OPTION)
                        {
                            for(int i=0; i<Index.length; i++)
                            {//---start for loop---
                                column[0] = table.getValueAt(Index[i], 0);
                                int deletedId = (int)column[0];

                                String deleteQuery = "delete from  consecutive where ID="+ deletedId +" ";
                                pst = conn.prepareStatement(deleteQuery);
                                pst.execute();

                                updateTable(); //---fo r refresh/update Table---
                               
                            }//---for loop end---
                            JOptionPane.showMessageDialog(null,"Deleted Successfully.");                       
                            
                        }
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"Please Select row.");
                }
                conn.close();  //---close connection---
                
            }catch(Exception ex){
                ex.printStackTrace();
            }
    
    }//GEN-LAST:event_btnRemoveActionPerformed

    public void getData()
    {
        try {
                conn = cObj.getConnection(); //---get connection---
                String q = " select * from  consecutive ";
                pst = conn.prepareStatement(q);
                rs = pst.executeQuery();

                tableOfConsecutiveSessions.setModel(DbUtils.resultSetToTableModel(rs));
            
            
            }catch (SQLException ex) {
                System.err.println("Go to an exception!!!");                              
                JOptionPane.showConfirmDialog(null, ex.getMessage());
            }
    }
    
    //---update/refresh table after execute querys---
    private void updateTable()
    {
        try{
                String sql = "select * From consecutive";
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                tableOfConsecutiveSessions.setModel(DbUtils.resultSetToTableModel(rs));
            }catch(Exception ex){
            
            }
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        consecutiveParallelOverlap tab = new consecutiveParallelOverlap();
        tab.TabbedPane.setSelectedIndex(0);
        tab.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void tableOfConsecutiveSessionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOfConsecutiveSessionsMouseClicked
       
    }//GEN-LAST:event_tableOfConsecutiveSessionsMouseClicked
    //for search....
    private void txtSerachKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerachKeyReleased
       DefaultTableModel table = (DefaultTableModel) tableOfConsecutiveSessions.getModel();
       String search_value = txtSerach.getText();
       TableRowSorter<DefaultTableModel> sort = new TableRowSorter<>(table);
       tableOfConsecutiveSessions.setRowSorter(sort);
       sort.setRowFilter(RowFilter.regexFilter(search_value));
    }//GEN-LAST:event_txtSerachKeyReleased

    private void cBoxDayInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_cBoxDayInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cBoxDayInputMethodTextChanged

    private void cBoxDurationInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_cBoxDurationInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cBoxDurationInputMethodTextChanged

    private void btnNonOverlapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNonOverlapActionPerformed
       nextMoveConsecutive();
    }//GEN-LAST:event_btnNonOverlapActionPerformed
    
    //----get data for comboBox from day_time table----
    public void getData2()
    {
       try {
                conn = cObj.getConnection();//---get connection---
                String q_2 = " select * from day_time ";
                pst = conn.prepareStatement(q_2); //---Execute Query---
             
                rs = pst.executeQuery(); //---comboBox---
                while(rs.next())
                {
                    cBoxDay.addItem(rs.getString("day"));
                    cBoxTime.addItem(rs.getString("time"));
                    cBoxDuration.addItem(rs.getString("duration"));
                }
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(consecutiveParallelOverlap.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public void nextMoveConsecutive(){
        try {
                conn = cObj.getConnection();//---get connection---
                TableModel table1 = tableOfConsecutiveSessions.getModel();
                int [] Index = tableOfConsecutiveSessions.getSelectedRows();
                Object [] column = new Object[10];
                            
                if(tableOfConsecutiveSessions.getSelectedRowCount()== 0)
                    JOptionPane.showMessageDialog(null,"Please select Row.");
                else 
                {   
                    if(tableOfConsecutiveSessions.getSelectedRowCount() >0  )
                    {   
                        //---start for loop---
                        for(int i=0; i<Index.length; i++)
                        {
                            column[0] = table1.getValueAt(Index[i], 0);
                            column[1] = table1.getValueAt(Index[i], 1); //Lecturers
                            column[2] = table1.getValueAt(Index[i], 2);
                            column[3] = table1.getValueAt(Index[i], 3);
                            column[4] = table1.getValueAt(Index[i], 4);
                            column[5] = table1.getValueAt(Index[i], 5);
                            column[6] = table1.getValueAt(Index[i], 6);
                            column[7] = cBoxTime.getSelectedItem().toString();
                            column[8] = cBoxDay.getSelectedItem().toString();
                            column[9] = cBoxDuration.getSelectedItem().toString();
                                                        
                            int id = (int) column[0];
                            String lecs = column[1].toString();
                            String sCode = column[2].toString();
                            String sName = column[3].toString();
                            String tag = column[4].toString();
                            String gId = column[5].toString();
                            String room = column[6].toString();
                            String time = column[7].toString();
                            String day = column[8].toString();
                            String duration = column[9].toString();
                           
                            //-----access non-Overlapping DataBase & check already exists------
                            String checkQuery = " SELECT * FROM non_overlap WHERE  Lecturer ='"+lecs+"' AND StartTime='"+time+"' AND Day='"+day+"'  OR  GroupId='"+gId+"' AND StartTime='"+time+"' AND Day='"+day+"'  OR  Room='"+room+"' AND Day='"+day+"' AND StartTime='"+time+"' ";
                            pst = conn.prepareStatement(checkQuery);          //           ----1st Condision----                                   (or)                ----2nd Condision----                          (or)                    ----3rd Condision----
                            rs = pst.executeQuery();
                            if(rs.next()) //---if already exists---
                            {
                                if(rs.getString("Lecturer").equals(lecs) && rs.getString("SubjectCode").equals(sCode) && rs.getString("StartTime").equals(time) && rs.getString("Day").equals(day))
                                   JOptionPane.showMessageDialog(null, "This Session already exist.");
                                else if(rs.getString("Lecturer").equals(lecs) && rs.getString("StartTime").equals(time) && rs.getString("Day").equals(day) && ! rs.getString("SubjectCode").equals(sCode))
                                    JOptionPane.showMessageDialog(null, "Class is already available for this LECTURER at this time of day.");
                                
                                else if(rs.getString("GroupId").equals(gId) && rs.getString("StartTime").equals(time) && rs.getString("Day").equals(day) && ! rs.getString("SubjectCode").equals(sCode))
                                    JOptionPane.showMessageDialog(null, "Class is already available for this GROUP at this time of day.");
                                
                                else if(rs.getString("Room").equals(room) && rs.getString("StartTime").equals(time) && rs.getString("Day").equals(day) && ! rs.getString("SubjectCode").equals(sCode))
                                    JOptionPane.showMessageDialog(null, "Class is already available to this HALL at this time of day.");
                            }
                            else
                            {
                                String insertRows= " insert into non_overlap(Lecturer, SubjectCode, SubjectName, Tag, GroupId, Room, StartTime, Day, Duration)" +" values(?,?,?,?,?,?,?,?,?)";
                                pst = conn.prepareStatement(insertRows);
                                       
                                        pst.setString(1, lecs);
                                        pst.setString(2, sCode);
                                        pst.setString(3, sName);
                                        pst.setString(4, tag);
                                        pst.setString(5, gId);
                                        pst.setString(6, room);
                                        pst.setString(7, time);
                                        pst.setString(8, day);
                                        pst.setString(9, duration);
                                        pst.execute(); 

                                JOptionPane.showMessageDialog(null,id+" row is added.");
                            }
                        }//---End for loop--- 
                    } 
                    conn.close(); //---close connection---
                }
            }catch(Exception ex){
            
            }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addSession.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addSession.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addSession.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addSession.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addSession ().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNonOverlap;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox<String> cBoxDay;
    private javax.swing.JComboBox<String> cBoxDuration;
    private javax.swing.JComboBox<String> cBoxTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableOfConsecutiveSessions;
    private javax.swing.JTextField txtSerach;
    // End of variables declaration//GEN-END:variables
}
